/* tslint:disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    pages: Page;
    media: Media;
    products: Product;
    categories: Category;
    users: User;
    carts: Cart;
    orders: Order;
  };
  globals: {
    menus: Menu;
    settings: Settings;
  };
}
export interface Page {
  id: string;
  title: string;
  publishedDate?: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      [k: string]: unknown;
    }[];
    links?: {
      link: NavLink;
      id?: string;
    }[];
    media: string | Media;
  };
  layout: (
    | {
        ctaBackgroundColor?: 'white' | 'black';
        richText: {
          [k: string]: unknown;
        }[];
        links?: {
          link: NavLink;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'cta';
      }
    | {
        columns?: {
          size?: 'oneThird' | 'half' | 'twoThirds' | 'full';
          richText: {
            [k: string]: unknown;
          }[];
          enableLink?: boolean;
          link?: NavLink;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        mediaBlockBackgroundColor?: 'white' | 'black';
        position?: 'default' | 'fullscreen';
        media: string | Media;
        id?: string;
        blockName?: string;
        blockType: 'mediaBlock';
      }
    | {
        introContent: {
          [k: string]: unknown;
        }[];
        populateBy?: 'collection' | 'selection';
        relationTo?: 'products';
        categories?: string[] | Category[];
        limit?: number;
        selectedDocs?:
          | {
              value: string;
              relationTo: 'products';
            }[]
          | {
              value: Product;
              relationTo: 'products';
            }[];
        populatedDocs?:
          | {
              value: string;
              relationTo: 'products';
            }[]
          | {
              value: Product;
              relationTo: 'products';
            }[];
        populatedDocsTotal?: number;
        id?: string;
        blockName?: string;
        blockType: 'archive';
      }
  )[];
  slug?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface NavLink {
  type?: 'reference' | 'custom';
  reference:
    | {
        value: string | Page;
        relationTo: 'pages';
      }
    | {
        value: string | Product;
        relationTo: 'products';
      };
  url: string;
  label: string;
  appearance?: 'default' | 'primary' | 'secondary';
  newTab?: boolean;
  megaMenu?: boolean;
}
export interface Product {
  id: string;
  title: string;
  image?: string | Media;
  description?: string;
  slug?: string;
  sku?: string;
  stock?: number;
  price?: number;
  categories?: string[] | Category[];
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Media {
  id: string;
  alt: string;
  caption?: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    square?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    sixteenByNineMedium?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Category {
  id: string;
  title?: string;
  slug: string;
  parent?: string | Category;
  breadcrumbs?: {
    doc?: string | Category;
    url?: string;
    label?: string;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface User {
  id: string;
  name?: string;
  roles?: ('admin' | 'customer')[];
  purchases?: string[] | Product[];
  cart?: string | Cart;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean;
  apiKey?: string;
  apiKeyIndex?: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Cart {
  id: string;
  items?: {
    product?: string | Product;
    quantity?: number;
    id?: string;
  }[];
  count?: number;
  user?: string | User;
  lastEdit?: number;
  total?: number;
  updatedAt: string;
  createdAt: string;
}
export interface Order {
  id: string;
  orderedBy?: {
    user?: string | User;
    name?: string;
    email?: string;
  };
  items?: {
    product?: string | Product;
    title?: string;
    quantity?: number;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Menu {
  id: string;
  mainMenu: {
    links?: {
      link: NavLink;
      children?: {
        link: NavLink;
        children?: {
          link: NavLink;
          id?: string;
        }[];
        id?: string;
      }[];
      id?: string;
    }[];
  };
  mobileMenu: {
    links?: {
      link: NavLink;
      children?: {
        link: NavLink;
        children?: {
          link: NavLink;
          id?: string;
        }[];
        id?: string;
      }[];
      id?: string;
    }[];
  };
  footerMenu: {
    links?: {
      link: NavLink;
      id?: string;
    }[];
  };
  updatedAt?: string;
  createdAt?: string;
}
export interface Settings {
  id: string;
  logos: {
    main?: string | Media;
    favIcon?: string | Media;
  };
  colors: {
    primary: string;
    secondary: string;
  };
  updatedAt?: string;
  createdAt?: string;
}
